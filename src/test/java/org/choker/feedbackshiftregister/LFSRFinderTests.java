package org.choker.feedbackshiftregister;

import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
/**
 * Tests for LFSRFinder (system of linear equations)
 * 
 * Copyright (c) 2024 Jalal Choker
 */
public class LFSRFinderTests {

  @Test
  void testLFSRFinder() {
    System.out.println("\n"
        + "#".repeat(18) + " Find CV of a sequence generated by LFSR using SoE Test "
        + "#".repeat(18));

    // source: COP514 Cryptography and Secure Systems - lfsr lect. 5 dec
    testLFSRFinder(
        new int[] {0, 0, 0, 1, 0, 0, 1, 1}, new ArrayList<Integer>(Arrays.asList(0, 0, 1, 1)));
    // source: COP514 Cryptography and Secure Systems - lfsr tutorial ques. 1
    testLFSRFinder(new int[] {0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0},
        new ArrayList<Integer>(Arrays.asList(0, 1, 1, 0, 1, 1)));
    testLFSRFinder(new int[] {0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1},
        new ArrayList<Integer>(Arrays.asList(0, 0, 1, 1)));
    // source: http://koclab.cs.ucsb.edu/ simplified version slides 34-40-41
    testLFSRFinder(new int[] {0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0},
        new ArrayList<Integer>(Arrays.asList(0, 0, 1, 0, 1)));
    // source:SANDJA REPORT ex. 2 pages 11 , 13
    testLFSRFinder(new int[] {1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0},
        new ArrayList<Integer>(Arrays.asList(1, 0, 0, 1)));
    // source:https://www.moria.us/articles/demystifying-the-lfsr/ fibo ver.
    testLFSRFinder(new int[] {0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1},
        new ArrayList<Integer>(Arrays.asList(0, 0, 0, 1, 1, 1, 0, 1)));
  }

  static void testLFSRFinder(int[] sequence, List<Integer> expectedCV) {
    var n = expectedCV.size(); // lfsr length
    var cp = Utils.toCharacteristicPolynomial(expectedCV); // Characteristic polynomial
    var p = (int) Math.pow(2, n) - 1; // period of maximal lfsr
    var t = 2 * n; // threshold to find lfsr

    System.out.println(n + "-bit LFSR - P*(x): " + cp + " - P: " + p + " - T: " + t);
    System.out.println("Expected CV: " + expectedCV.toString());
    // test against K = (T-1), fails
    {
      int[] k = Arrays.copyOfRange(sequence, 0, t - 1);
      System.out.println("Sequence:    " + Arrays.toString(k) + " - K: " + k.length);
      var actualCV = LFSRFinder.find(k);
      System.out.println("Actual CV:   " + actualCV.toString());
      System.out.println("Test OK:     " + expectedCV.toString().equals(actualCV.toString()));
    }
    // test against K = T, succeeds
    {
      int[] k = Arrays.copyOfRange(sequence, 0, t); // K = T
      System.out.println("Sequence:    " + Arrays.toString(k) + " - K: " + k.length);
      var actualCV = LFSRFinder.find(k);
      System.out.println("Actual CV:   " + actualCV.toString());
      System.out.println("Test OK:     " + expectedCV.toString().equals(actualCV.toString()));
    }
    // test against K > T if there's enough sequence, succeeds
    if (sequence.length > t) {
      System.out.println(
          "Sequence:    " + Arrays.toString(sequence) + " - K: " + sequence.length); // K = T
      var actualCV = LFSRFinder.find(sequence);
      System.out.println("Actual CV:   " + actualCV.toString());
      System.out.println("Test OK:     " + expectedCV.toString().equals(actualCV.toString()));
    }
    System.out.println("#".repeat(92));
  }
}