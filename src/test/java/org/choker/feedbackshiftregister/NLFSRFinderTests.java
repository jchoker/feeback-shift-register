package org.choker.feedbackshiftregister;

import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
/**
 * Tests for NLFSRFinder (extended system of linear equations)
 *
 * Copyright (c) 2024 Jalal Choker
 */
public class NLFSRFinderTests {

	@Test
	void demo() {
		System.out.println("\n"
				+ "#".repeat(1)
				+ " Find coefficient & AND vectors from a sequence generated by Adjacent-AND NLFSR using ESoE Test "
				+ "#".repeat(1) + "\n");

		// source: https://people.kth.se/~dubrova/NLFSRwebpage/4NLFSR 0,1,2,(1,2)
		// Period = 1000 1011 0100 111 State 0001
		// (3n-1 is minimum possible for n-bit NLFSR recovery, n=4 -> 11 bit sequence is required)
		// using P of keystream
		testNLFSRFinder(new int[]{1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1}, 4,
				"x0 + x1 + x2 + x1.x2", new ArrayList<Integer>(Arrays.asList(0, 1, 1, 1)),
				new ArrayList<Integer>(Arrays.asList(0, 1, 0)));
	}

	// test of sequences generated by Adjacent-AND NLFSRs
	@Test
	void testNLFSRFinder() {
		System.out.println("\n"
				+ "#".repeat(6)
				+ " Finding CV/AV of a sequence generated by Adjacent-AND NLFSR using SoE Test "
				+ "#".repeat(7) + "\n");
		{
			// source: https://people.kth.se/~dubrova/NLFSRwebpage/4NLFSR 0,1,2,(1,2)
			// Period = 1000 1011 0100 111 State 0001
			// (3n-1 is minimum possible for n-bit NLFSR recovery, n=4 -> 11 bit sequence is required)
			// using P of keystream
			testNLFSRFinder(new int[]{1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1}, 4,
					"x0 + x1 + x2 + x1.x2", new ArrayList<Integer>(Arrays.asList(0, 1, 1, 1)),
					new ArrayList<Integer>(Arrays.asList(0, 1, 0)));
		}
		{
			// https://people.kth.se/~dubrova/NLFSRwebpage/4NLFSR 0,1,(1,2),(2,3)
			// 1 less XOR and 1 more AND with the previous NLFSR
			// using P of keystream
			testNLFSRFinder(new int[]{1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0}, 4,
					"x0 + x1 + x1.x2 + x2.x3", new ArrayList<Integer>(Arrays.asList(0, 0, 1, 1)),
					new ArrayList<Integer>(Arrays.asList(1, 1, 0)));
		}
		{
			// https://people.kth.se/~dubrova/NLFSRwebpage/5NLFSR 0,1,(1,2),(3,4)
			// 1 more register
			// P: 0100 1100 0010 0011 1110 1110 0101 011
			testNLFSRFinder(new int[]{0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1,
							1, 1, 0, 0, 1, 0, 1, 0, 1, 1
					},
					5, "x0 + x1 + x1.x2 + x3.x4", new ArrayList<Integer>(Arrays.asList(0, 0, 0, 1, 1)),
					new ArrayList<Integer>(Arrays.asList(1, 0, 1, 0)));
		}
	}

	// period: 1 period of output sequence, n: size of expected NLFSR
	static void testNLFSRFinder(int[] period, int n, String feedback, List<Integer> expectedCV,
								List<Integer> expectedAV) {
		var t = (3 * n - 1);
		System.out.println("N: " + n + " - f: " + feedback + " - T: " + t);
		System.out.println("Expected CV: " + expectedCV.toString());
		System.out.println("Expected AV: " + expectedAV.toString());
		{
			int[] k = Arrays.copyOfRange(period, 0, t - 1); // K = (T-1)
			System.out.println("\nSequence:    " + Arrays.toString(k) + " - K: " + k.length);
			var nlfsr = NLFSRFinder.find(k);
			var actualCV = nlfsr.get("cv");
			System.out.println("Actual CV:   " + actualCV.toString());
			var actualAV = nlfsr.get("av");
			System.out.println("Actual AV:   " + actualAV.toString());
			System.out.println("Test OK:     "
					+ (expectedCV.toString().equals(actualCV.toString())
					&& expectedAV.toString().equals(expectedAV.toString())));
		}
		{
			int[] k = Arrays.copyOfRange(period, 0, t); // K = T
			System.out.println("\nSequence:    " + Arrays.toString(k) + " - K: " + k.length);
			var nlfsr = NLFSRFinder.find(k);
			var actualCV = nlfsr.get("cv");
			System.out.println("Actual CV:   " + actualCV.toString());
			var actualAV = nlfsr.get("av");
			System.out.println("Actual AV:   " + actualAV.toString());
			System.out.println("Test OK:     "
					+ (expectedCV.toString().equals(actualCV.toString())
					&& expectedAV.toString().equals(expectedAV.toString())));
		}
		{
			System.out.println(
					"\nSequence:    " + Arrays.toString(period) + " - K: " + period.length); // K = P
			var nlfsr = NLFSRFinder.find(period);
			var actualCV = nlfsr.get("cv");
			System.out.println("Actual CV:   " + actualCV.toString());
			var actualAV = nlfsr.get("av");
			System.out.println("Actual AV:   " + actualAV.toString());
			System.out.println("Test OK:     "
					+ (expectedCV.toString().equals(actualCV.toString())
					&& expectedAV.toString().equals(expectedAV.toString())));
		}
		System.out.println("#".repeat(92));
	}
}