package org.choker.feedbackshiftregister;

import org.junit.jupiter.api.Test;

/**
 * Finding LR and LC of an LFSR that can generate same sequences as a given
 * NLFSR test using Berlekamp-Massey and system of linear equations algorithms.
 * This ensures that both are equivalent and return the same result against an NLFSR sequence.
 * 
 * Copyright (c) 2024 Jalal Choker
 */
public class NLFSRLcUsingBerlekampMasseyAndSoeTests {

  @Test
  void testBmAndSoeAlgorithmsSucceedsForNLFSRSequence() {
    System.out.println("\n"
            + "#".repeat(3)
            + " Find using BM and SoE algorithms the LR of a sequence generated by an NLFSR Test "
            + "#".repeat(3));
    System.out.println("#".repeat(88));
    // https://people.kth.se/~dubrova/nlfsr.html n=4
    var f = "0,1,(1,2),(2,3)"; // maximal function
    var taps = Utils.extractTaps(f);
    var ands = Utils.extractAnds(f);
    var nlfsr = new FibonacciNLFSR(4, taps, ands, "1000");
    System.out.print("Created the NLFSR --> ");
    System.out.println(nlfsr);

    var twoPeriods = nlfsr.generate(2 * nlfsr.getPeriod().intValue()); // generate 2 periods
    var twoPeriodsArray = Utils.toIntArray(twoPeriods);
    System.out.println("Generated 2 periods sequence: " + twoPeriods);

    System.out.println("Running the sequence against BM and SoE algorithms...");
    var cv_bm = BerlekampMassey.run(twoPeriodsArray);
    var cv_soe = LFSRFinder.find(twoPeriodsArray);

    var lc_bm = cv_bm.size();
    var lc_soe = cv_soe.size();
    System.out.println("LR (SoE): " + cv_soe.toString());
    System.out.println("LR (BM):  " + cv_bm.toString());
    System.out.println("LC (SoE): " + lc_soe);
    System.out.println("LC (BM):  " + lc_bm);
    System.out.println("Test OK         : " + cv_bm.equals(cv_soe));
    System.out.println("#".repeat(88));
    System.out.println("Created an LFSR from the returned LR");
    var lfsr = new FibonacciLFSR(cv_bm.size(),
            new int[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, "10101111001000");
    // System.out.println(lfsr);

    System.out.println("Generated same length sequence");
    var actualKeyStr = lfsr.generate(2 * nlfsr.getPeriod().intValue());
    System.out.println("Expected sequence: " + twoPeriods);
    System.out.println("Actual sequence:   " + actualKeyStr);
    System.out.println("Test OK         : " + twoPeriods.equals(actualKeyStr));
    System.out.println("#".repeat(88));
  }
}